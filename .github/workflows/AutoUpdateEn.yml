name: Update dol-en

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Update from dol-kr Release"]
    types:
      - completed

jobs:
  update_en_version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: pip install -r $GITHUB_WORKSPACE/scripts/requirements.txt

      - name: Install Mega CLI
        run: |
          sudo apt update
          sudo apt install -y megatools

      - name: Get latest Chrome and ChromeDriver versions
        run: |
          cd $GITHUB_WORKSPACE/scripts
          python DoLEnScraper3.py > $GITHUB_WORKSPACE/version_info.txt
          cat $GITHUB_WORKSPACE/version_info.txt
        id: get_latest_versions

      - name: Set environment variables from versions
        run: |
          source $GITHUB_WORKSPACE/version_info.txt
          echo "CHROME_VERSION=$CHROME_VERSION" >> $GITHUB_ENV
          echo "CHROME_DOWNLOAD_URL=$CHROME_DOWNLOAD_URL" >> $GITHUB_ENV
          echo "CHROMEDRIVER_DOWNLOAD_URL=$CHROMEDRIVER_DOWNLOAD_URL" >> $GITHUB_ENV

      - name: Install Chrome and ChromeDriver
        run: |
          wget -O /tmp/chrome.zip $CHROME_DOWNLOAD_URL
          unzip /tmp/chrome.zip -d $GITHUB_WORKSPACE/chrome
          sudo mv $GITHUB_WORKSPACE/chrome/chrome-linux64/chrome /usr/bin/google-chrome
          wget -O /tmp/chromedriver.zip $CHROMEDRIVER_DOWNLOAD_URL
          unzip /tmp/chromedriver.zip -d $GITHUB_WORKSPACE/chromedriver
          sudo mv $GITHUB_WORKSPACE/chromedriver/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver

      - name: Get current version
        id: get_version
        run: |
          echo "CURRENT_VERSION=$(cat $GITHUB_WORKSPACE/current_version.txt | cut -d '-' -f 1)" >> $GITHUB_ENV
          echo "CURRENT_VERSION_EN=$(cat $GITHUB_WORKSPACE/current_version_En.txt)" >> $GITHUB_ENV
          echo "Current Version: ${{ env.CURRENT_VERSION }}"
          echo "Current Version En: ${{ env.CURRENT_VERSION_EN }}"

      - name: Scrape for matching version link
        id: scrape_version
        run: |
          cd $GITHUB_WORKSPACE/scripts
          download_link=$(python DoLEnScraper.py ${{ env.CURRENT_VERSION }})
          echo "download_link=$download_link" >> $GITHUB_ENV

      - name: Check if link was found and versions match
        if: env.download_link == '' || env.CURRENT_VERSION == env.CURRENT_VERSION_EN
        run: echo "No matching version found or versions match. Skipping download."

      - name: Download and unzip the file
        if: env.download_link != '' && env.CURRENT_VERSION != env.CURRENT_VERSION_EN
        run: |
          echo "Download Link: ${{ env.download_link }}"
          cd $GITHUB_WORKSPACE/scripts
          python DoLEnScraper2.py "${{ env.download_link }}"
          unzip "*.zip" -d $GITHUB_WORKSPACE/DoL/
          mv "$GITHUB_WORKSPACE/DoL/Degrees of Lewdity ${{ env.CURRENT_VERSION }}.html" $GITHUB_WORKSPACE/DoLEn.html
          mv $GITHUB_WORKSPACE/DoLEn.html $GITHUB_WORKSPACE/DoL/

      - name: Update version file
        if: env.download_link != '' && env.CURRENT_VERSION != env.CURRENT_VERSION_EN
        run: echo ${{ env.CURRENT_VERSION }} > $GITHUB_WORKSPACE/current_version_En.txt

      - name: Commit and push changes
        if: env.download_link != '' && env.CURRENT_VERSION != env.CURRENT_VERSION_EN
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add $GITHUB_WORKSPACE
          git commit -m "Updated ${{ env.CURRENT_VERSION }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
