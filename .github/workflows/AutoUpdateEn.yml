name: Update dol-en

on:
  workflow_dispatch:
  push:
    paths:
      - 'scripts/DoLEnScraper3.py'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        pip install requests

    - name: Run DoLEnScraper3 script
      run: |
        python scripts/DoLEnScraper3.py > version_info.txt
        cat version_info.txt

    - name: Extract version info
      id: version_info
      run: |
        CHROME_VERSION=$(cat version_info.txt | grep 'Latest Chrome Version:' | awk '{print $4}')
        CHROME_URL=$(cat version_info.txt | grep 'Chrome Download URL:' | awk '{print $4}')
        CHROMEDRIVER_URL=$(cat version_info.txt | grep 'ChromeDriver Download URL:' | awk '{print $4}')
        echo "::set-output name=chrome_version::$CHROME_VERSION"
        echo "::set-output name=chrome_url::$CHROME_URL"
        echo "::set-output name=chromedriver_url::$CHROMEDRIVER_URL"

    - name: Download and install Chrome
      run: |
        wget ${{ steps.version_info.outputs.chrome_url }} -O chrome-linux64.zip
        unzip chrome-linux64.zip
        sudo mv chrome-linux64/chrome /usr/bin/google-chrome

    - name: Download and install ChromeDriver
      run: |
        wget ${{ steps.version_info.outputs.chromedriver_url }} -O chromedriver_linux64.zip
        unzip chromedriver_linux64.zip
        sudo mv chromedriver /usr/bin/chromedriver

    - name: Get current version
      id: get_version
      run: |
        echo "CURRENT_VERSION=$(cat $GITHUB_WORKSPACE/current_version.txt | cut -d '-' -f 1)" >> $GITHUB_ENV
        echo "CURRENT_VERSION_EN=$(cat $GITHUB_WORKSPACE/current_version_En.txt)" >> $GITHUB_ENV
        echo "Current Version: ${{ env.CURRENT_VERSION }}"
        echo "Current Version En: ${{ env.CURRENT_VERSION_EN }}"

    - name: Scrape for matching version link
      id: scrape_version
      run: |
        cd $GITHUB_WORKSPACE/scripts
        python DoLEnScraper.py ${{ env.CURRENT_VERSION }}

    - name: Check if link was found and versions match
      if: steps.scrape_version.outputs.download_link == '' || ${{ env.CURRENT_VERSION }} == ${{ env.CURRENT_VERSION_EN }}
      run: echo "No matching version found or versions match. Skipping download."

    - name: Download and unzip the file
      if: steps.scrape_version.outputs.download_link != '' && ${{ env.CURRENT_VERSION }} != ${{ env.CURRENT_VERSION_EN }}
      run: |
        echo "Download Link: ${{ steps.scrape_version.outputs.download_link }}"
        cd $GITHUB_WORKSPACE/scripts
        xvfb-run -a python DoLEnScraper2.py ${{ steps.scrape_version.outputs.download_link }}
        unzip $GITHUB_WORKSPACE/dol.zip
        mv "Degrees of Lewdity ${{ env.CURRENT_VERSION }}.html" $GITHUB_WORKSPACE/DoLEn.html
        mv $GITHUB_WORKSPACE/DoLEn.html $GITHUB_WORKSPACE/DoL/

    - name: Update version file
      if: steps.scrape_version.outputs.download_link != '' && ${{ env.CURRENT_VERSION }} != ${{ env.CURRENT_VERSION_EN }}
      run: echo ${{ env.CURRENT_VERSION }} > $GITHUB_WORKSPACE/current_version_En.txt

    - name: Commit and push changes
      if: steps.scrape_version.outputs.download_link != '' && ${{ env.CURRENT_VERSION }} != ${{ env.CURRENT_VERSION_EN }}
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add $GITHUB_WORKSPACE
        git commit -m "Updated ${{ env.CURRENT_VERSION }}"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
