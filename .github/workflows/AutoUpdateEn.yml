name: Update dol-en

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Update from dol-kr Release"]
    types:
      - completed

jobs:
  update_en_version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: pip install -r $GITHUB_WORKSPACE/scripts/requirements.txt

      - name: Install Mega CLI
        run: |
          sudo apt update
          sudo apt install -y megatools

      - name: Get latest Chrome and ChromeDriver versions
        run: |
          cd $GITHUB_WORKSPACE/scripts
          python DoLEnScraper3.py > $GITHUB_WORKSPACE/version_info.txt
          cat $GITHUB_WORKSPACE/version_info.txt
        id: get_latest_versions

      - name: Set environment variables from versions
        run: |
          source $GITHUB_WORKSPACE/version_info.txt
          echo "CHROME_VERSION=$CHROME_VERSION" >> $GITHUB_ENV
          echo "CHROME_DOWNLOAD_URL=$CHROME_DOWNLOAD_URL" >> $GITHUB_ENV
          echo "CHROMEDRIVER_DOWNLOAD_URL=$CHROMEDRIVER_DOWNLOAD_URL" >> $GITHUB_ENV

      - name: Install Chrome and ChromeDriver
        run: |
          wget -O /tmp/chrome.zip $CHROME_DOWNLOAD_URL
          unzip /tmp/chrome.zip -d $GITHUB_WORKSPACE/chrome
          sudo mv $GITHUB_WORKSPACE/chrome/chrome-linux64/chrome /usr/bin/google-chrome
          wget -O /tmp/chromedriver.zip $CHROMEDRIVER_DOWNLOAD_URL
          unzip /tmp/chromedriver.zip -d $GITHUB_WORKSPACE/chromedriver
          sudo mv $GITHUB_WORKSPACE/chromedriver/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver

      - name: Get current version
        id: get_version
        run: |
          echo "CURRENT_VERSION=$(cat $GITHUB_WORKSPACE/current_version.txt | cut -d '-' -f 1)" >> $GITHUB_ENV
          echo "CURRENT_VERSION_EN=$(cat $GITHUB_WORKSPACE/current_version_En.txt)" >> $GITHUB_ENV
          echo "Current Version: ${{ env.CURRENT_VERSION }}"
          echo "Current Version En: ${{ env.CURRENT_VERSION_EN }}"

      - name: Scrape for matching version link
        id: scrape_version
        run: |
          cd $GITHUB_WORKSPACE/scripts
          python DoLEnScraper.py ${{ env.CURRENT_VERSION }}

      - name: Check if link was found and versions match
        if: steps.scrape_version.outputs.download_link == '' || ${{ env.CURRENT_VERSION }} == ${{ env.CURRENT_VERSION_EN }}
        run: echo "No matching version found or versions match. Skipping download."

      - name: Download and unzip the file
        if: steps.scrape_version.outputs.download_link != '' && ${{ env.CURRENT_VERSION }} != ${{ env.CURRENT_VERSION_EN }}
        run: |
          echo "Download Link: ${{ steps.scrape_version.outputs.download_link }}"
          cd $GITHUB_WORKSPACE/scripts
          output_filename="downloaded_file.zip"
          python DoLEnScraper2.py "${{ steps.scrape_version.outputs.download_link }}" "$output_filename"
          if [ -d "$GITHUB_WORKSPACE/DoL/img" ]; then
            echo "Removing existing img folder"
            sudo rm -rf "$GITHUB_WORKSPACE/DoL/img"
          fi
          unzip "$output_filename" -d $GITHUB_WORKSPACE/DoL/
          mv "$GITHUB_WORKSPACE/DoL/Degrees of Lewdity ${{ env.CURRENT_VERSION }}.html" "$GITHUB_WORKSPACE/DoLEn.html"
          mv "$GITHUB_WORKSPACE/DoLEn.html" "$GITHUB_WORKSPACE/DoL/"

      - name: Update version file
        if: steps.scrape_version.outputs.download_link != '' && ${{ env.CURRENT_VERSION }} != ${{ env.CURRENT_VERSION_EN }}
        run: echo ${{ env.CURRENT_VERSION }} > $GITHUB_WORKSPACE/current_version_En.txt

      - name: Commit and push changes
        if: steps.scrape_version.outputs.download_link != '' && ${{ env.CURRENT_VERSION }} != ${{ env.CURRENT_VERSION_EN }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          git pull --rebase origin main
          git commit -m "Updated ${{ env.CURRENT_VERSION }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy img folder to retexture/vanila
        if: steps.scrape_version.outputs.download_link != '' && ${{ env.CURRENT_VERSION }} != ${{ env.CURRENT_VERSION_EN }}
        run: |
          mkdir -p $GITHUB_WORKSPACE/retexture/vanila/
          if [ -d "$GITHUB_WORKSPACE/retexture/vanila/img" ]; then
            echo "Removing existing img folder in retexture/vanila"
            sudo rm -rf "$GITHUB_WORKSPACE/retexture/vanila/img"
          fi
          cp -r $GITHUB_WORKSPACE/DoL/img $GITHUB_WORKSPACE/retexture/vanila/
          ls -al $GITHUB_WORKSPACE/retexture/vanila/

      - name: Clean up Chrome, ChromeDriver, and version_info.txt
        if: always()
        run: |
          echo "Deleting Google Chrome, ChromeDriver, and version_info.txt..."
          sudo rm -rf /usr/bin/google-chrome
          sudo rm -rf /usr/local/bin/chromedriver
          echo "Deleting Chrome workspace directories..."
          echo "GITHUB_WORKSPACE value: $GITHUB_WORKSPACE"
          if [ -d "$GITHUB_WORKSPACE/chrome" ]; then
            echo "$GITHUB_WORKSPACE/chrome exists. Deleting..."
            sudo chmod -R 777 "$GITHUB_WORKSPACE/chrome"
            sudo rm -rf "$GITHUB_WORKSPACE/chrome"
          else
            echo "$GITHUB_WORKSPACE/chrome not found"
          fi
          if [ -d "$GITHUB_WORKSPACE/chromedriver" ]; then
            echo "$GITHUB_WORKSPACE/chromedriver exists. Deleting..."
            sudo chmod -R 777 "$GITHUB_WORKSPACE/chromedriver"
            sudo rm -rf "$GITHUB_WORKSPACE/chromedriver"
          else
            echo "$GITHUB_WORKSPACE/chromedriver not found"
          fi
          echo "Deleting version_info.txt..."
          if [ -f "$GITHUB_WORKSPACE/version_info.txt" ]; then
            sudo rm -rf "$GITHUB_WORKSPACE/version_info.txt"
          fi
          echo "Cleanup completed."

      - name: List workspace directories after cleanup
        if: always()
        run: |
          echo "Checking if $GITHUB_WORKSPACE/chrome exists..."
          if [ -d "$GITHUB_WORKSPACE/chrome" ]; then
            echo "$GITHUB_WORKSPACE/chrome exists. Listing contents..."
            ls -al "$GITHUB_WORKSPACE/chrome"
          else
            echo "$GITHUB_WORKSPACE/chrome not found"
          fi
          echo "Checking if $GITHUB_WORKSPACE/chromedriver exists..."
          if [ -d "$GITHUB_WORKSPACE/chromedriver" ]; then
            echo "$GITHUB_WORKSPACE/chromedriver exists. Listing contents..."
            ls -al "$GITHUB_WORKSPACE/chromedriver"
          else
            echo "$GITHUB_WORKSPACE/chromedriver not found"
          fi
